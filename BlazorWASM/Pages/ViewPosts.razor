@page "/ViewPosts"

@using HttpClients.ClientInterfaces
@using global::Shared.Models
@using System.Runtime.CompilerServices
@using Microsoft.AspNetCore.Authorization
@inject IPostService postService
@inject ICommentService commentService
@inject NavigationManager navMgr
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
<h3>Posts</h3>

<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Username:</label>
                <input type="text" @bind="usernameFilter"/>
            </div>
            <div class="filter">
                <label>User id:</label>
                <input type="number" @bind="userIdFilter"/>
            </div>
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="titleContainsFilter"/>
            </div>
            <div class="filter">
                <label>Body contains:</label>
                <input type="text" @bind="bodyContainsFilter"/>
            </div>
            <div>
                <button @onclick="LoadPosts">Load</button>
            </div>
        }
        @if (!doShowFilters)
        {
            usernameFilter = null;
            userIdFilter = null;
            titleContainsFilter = null;
            bodyContainsFilter = null;
            <button @onclick="LoadPosts">Reload</button>
        }
    </div>
</div>

@if (posts == null)
{
    <span>Loading..</span>
}
else if (!posts.Any())
{
    <p>No Posts to display</p>
}
else
{
    @foreach (var item in posts)
    {
        <div>
            <p>Author: @item.Author.UserName</p>
            <p>Title: @item.Title</p>
             <p><button @onclick="@(() => GoToPost(item))">View</button></p>
            <hr>
        </div>
    }
}

 @if (comments == null)
    {
        <span>Loading Comments..</span>
    }
    
        

@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}


@code {
    private IEnumerable<Post>? posts;
    private IEnumerable<Comment>? comments;
    private string msg = "";
    private bool doShowFilters = false;
    
    private string? usernameFilter;
    private int? userIdFilter;
    private string? titleContainsFilter;
    private string? bodyContainsFilter;
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            posts = await postService.GetAsync(null, null, null, null);
            comments = await commentService.GetAsync(null, null, null, null, null);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private  async Task LoadPosts()
    {
        msg = "";
        try
        {
            posts = await postService.GetAsync(usernameFilter, userIdFilter, titleContainsFilter, bodyContainsFilter);
            comments = await commentService.GetAsync(null, null, null, null, null);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    public void GoToPost(Post? post)
    {
        if (post!=null)
        {
            try
            {
                int id = post.Id;
                navMgr.NavigateTo($"/ViewPost/{id}");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                msg = e.Message;
            }
        }
    }
}